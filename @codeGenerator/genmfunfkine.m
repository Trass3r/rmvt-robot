function [] = genmfunfkine(CGen)
%% GENMFUNFKINE Generates M-functions from the symbolic robot specific forward kinematics expressions.
%
%  Authors::
%        Jörn Malzahn
%        2012 RST, Technische Universität Dortmund, Germany
%        http://www.rst.e-technik.tu-dortmund.de
%

%% Preparation
% Output to logfile?
if ~isempty(CGen.logfile)
    logfid = fopen(CGen.logfile,'a');
else
    logfid = [];
end

%% Forward kinematics up to tool center point
multidfprintf([CGen.verbose, logfid],...
    [datestr(now),'\tGenerating forward kinematics m-function up to the end-effector frame: ']);
symname = 'fkine';
fname = fullfile(CGen.sympath,[symname,'.mat']);

if exist(fname,'file')
    tmpStruct = load(fname);
else
    error ('genMFunFkine:SymbolicsNotFound','Save symbolic expressions to disk first!')
end

funfilename = fullfile(CGen.robjpath,[symname,'.m']);
q = CGen.rob.gencoords;

matlabFunction(tmpStruct.(symname),'file',funfilename,...              % generate function m-file
    'outputs', {symname},...
    'vars', {'rob',[q]});
hStruct = createHeaderStructFkine(CGen.rob,CGen.rob.n,symname);                 % replace autogenerated function header
replaceheader(CGen,hStruct,funfilename);
multidfprintf([CGen.verbose, logfid],'\t%s\n',' done!');


%% Individual joint forward kinematics
multidfprintf([CGen.verbose, logfid],...
    [datestr(now),'\tGenerating forward kinematics m-function up to joint: ']);
for iJoints=1:CGen.rob.n
    
    multidfprintf([CGen.verbose, logfid],' %i ',iJoints);
    symname = ['T0_',num2str(iJoints)];
    fname = fullfile(CGen.sympath,[symname,'.mat']);
    
    tmpStruct = struct;
    tmpStruct = load(fname);
    
    funfilename = fullfile(CGen.robjpath,[symname,'.m']);
    q = CGen.rob.gencoords;
    
    matlabFunction(tmpStruct.(symname),'file',funfilename,...              % generate function m-file
        'outputs', {symname},...
        'vars', {'rob',[q]});
    hStruct = createHeaderStruct(CGen.rob,iJoints,CGen.rob.n,symname);                 % replace autogenerated function header
    CGen.replaceheader(hStruct,funfilename);
end
multidfprintf([CGen.verbose, logfid],'\t%s\n',' done!');

%% Cleanup
% Logfile to close?
if ~isempty(CGen.logfile)
    logfid = fclose(logfid);
end

end

%% Definition of the header contents for each generated file
function hStruct = createHeaderStruct(rob,curBody,nbodies,fname)
hStruct.funName = fname;
hStruct.shortDescription = ['Forward kinematics for the ',rob.name,' arm up to frame ',int2str(curBody),' of ',int2str(nbodies),'.'];
hStruct.calls= {['T = ',fname,'(q)']};
hStruct.detailedDescription = {['Given a set of joint variables up to joint number ',int2str(curBody),' the function'],...
    'computes the pose belonging to that joint with respect to the base frame.'};
hStruct.inputs = {['q:  ',int2str(curBody),'-element vector of generalized coordinates.'],...
    'Angles have to be given in radians!'};
hStruct.outputs = {['T:  [4x4] Homogenous transformation matrix relating the pose of joint ',int2str(curBody),' of ',int2str(nbodies)],...
    '          for the given joint values to the base frame.'};
hStruct.references = {'1) Robot Modeling and Control - Spong, Hutchinson, Vidyasagar',...
    '2) Modelling and Control of Robot Manipulators - Sciavicco, Siciliano',...
    '3) Introduction to Robotics, Mechanics and Control - Craig',...
    '4) Modeling, Identification & Control of Robots - Khalil & Dombre'};
hStruct.authors = {'This is an autogenerated function!',...
    'Code generator written by:',...
    'Jörn Malzahn',...
    '2012 RST, Technische Universität Dortmund, Germany',...
     'http://www.rst.e-technik.tu-dortmund.de'};
hStruct.seeAlso = {rob.name};
end

%% Definition of the header contents for each generated file
function hStruct = createHeaderStructFkine(rob,nbodies,fname)
hStruct.funName = fname;
hStruct.shortDescription = ['Forward kinematics solution including tool transformation for the ',rob.name,' arm.'];
hStruct.calls= {['T = ',fname,'(q)']};
hStruct.detailedDescription = {['Given a full set of joint variables the function'],...
    'computes the pose belonging to that joint with respect to the base frame.'};
hStruct.inputs = {['q:  ',int2str(nbodies),'-element vector of generalized coordinates.'],...
    'Angles have to be given in radians!'};
hStruct.outputs = {['T:  [4x4] Homogenous transformation matrix relating the pose of the tool'],...
    '          for the given joint values to the base frame.'};
hStruct.references = {'1) Robot Modeling and Control - Spong, Hutchinson, Vidyasagar',...
    '2) Modelling and Control of Robot Manipulators - Sciavicco, Siciliano',...
    '3) Introduction to Robotics, Mechanics and Control - Craig',...
    '4) Modeling, Identification & Control of Robots - Khalil & Dombre'};
hStruct.authors = {'This is an autogenerated function!',...
    'Code generator written by:',...
    'Jörn Malzahn',...
    '2012 RST, Technische Universität Dortmund, Germany',...
     'http://www.rst.e-technik.tu-dortmund.de'};
hStruct.seeAlso = {rob.name};
end