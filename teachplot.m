clf
mdl_puma560
p560.plot(qn)
set(gca, 'position', [.3 .1 .7 1])
r = p560;
opt.q0 = [];
opt.degrees = true;
opt.orientation = 'approach'

    bgcol = [135 206 250]/255;
    
    

    n = r.n;
    width = .9;
    height = .06;

    qlim = r.qlim;
    if any(isinf(qlim))
        error('for prismatic axes must define joint coordinate limits, set qlim properties for prismatic Links');
    end

    if isempty(opt.q0)
        q = zeros(1,n);
    else
        q = opt.q0;
    end

    % set up scale factor, from actual limits in radians/metres to display units
    qscale = ones(r.n,1);
    for i=1:r.n
        L=r.links(i);
        if opt.degrees && L.isrevolute
            qscale(i) = 180/pi;
        end
    end
    
    handles.qscale = qscale;
    handles.orientation = opt.orientation;
    %%%handles.callback = opt.callback;

    T6 = r.fkine(q);

    parent = uipanel(gcf, 'Title', 'Teach', 'BackGroundColor', bgcol,...
        'Position', [0 0 .25 1]);

    fig = parent;
    %set(fig,'MenuBar','none')
    %delete( get(fig, 'Children') )

    % first we check to see if there are any graphical robots of
    % this name, if so we use them, otherwise create a robot plot.

    rhandles = findobj('Tag', r.name);

    % attempt to get current joint config of graphical robot
    if ~isempty(rhandles)
        h = get(rhandles(1), 'UserData');
        if ~isempty(h.q)
            q = h.q;
        end
    end

    % now make the sliders
    for i=1:n
        % slider label
        uicontrol(parent, 'Style', 'text', ...
            'Units', 'normalized', ...
            'BackgroundColor', bgcol, ...
            'Position', [0 height*(n-i) 0.15 height], ...
            'String', sprintf('q%d', i));

        % slider itself
        q(i) = max( qlim(i,1), min( qlim(i,2), q(i) ) ); % clip to range
        handles.slider(i) = uicontrol(parent, 'Style', 'slider', ...
            'Units', 'normalized', ...
            'Position', [0.15 height*(n-i) 0.7 height], ...
            'Min', qlim(i,1), ...
            'Max', qlim(i,2), ...
            'Value', q(i), ...
            'Tag', sprintf('Slider%d', i));

        % text box showing slider value, also editable
        handles.edit(i) = uicontrol(parent, 'Style', 'edit', ...
            'Units', 'normalized', ...
                        'BackgroundColor', bgcol, ...
            'Position', [0.85 height*(n-i)+.01 0.15 height], ...
            'String', num2str(qscale(i)*q(i)), ...
            'Tag', sprintf('Edit%d', i));
    end

    %set(handles.slider(1))

    n = 8
    % X
    uicontrol(fig, 'Style', 'text', ...
        'Units', 'normalized', ...
        'BackgroundColor', bgcol, ...
        'Position', [0.05 1-height 0.2 height], ...
        'FontSize', 18, ...
        'HorizontalAlignment', 'left', ...
        'String', 'x:');

    handles.t6.t(1) = uicontrol(fig, 'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.3 1-height 0.6 height], ...
                'FontSize', 16, ...
        'String', sprintf('%.3f', T6(1,4)), ...
        'Tag', 'T6');

    % Y
    uicontrol(fig, 'Style', 'text', ...
        'Units', 'normalized', ...
        'BackgroundColor', bgcol, ...
        'Position', [0.05 1-2*height 0.2 height], ...
        'FontSize', 18, ...
        'HorizontalAlignment', 'left', ...
        'String', 'y:');

    handles.t6.t(2) = uicontrol(fig, 'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.3 1-2*height 0.6 height], ...
                'FontSize', 16, ...
                'String', sprintf('%.3f', T6(2,4)));

    % Z
    uicontrol(fig, 'Style', 'text', ...
        'Units', 'normalized', ...
        'BackgroundColor', bgcol, ...
        'Position', [0.05 1-3*height 0.2 height], ...
        'FontSize', 18, ...
        'HorizontalAlignment', 'left', ...
        'String', 'z:');

    handles.t6.t(3) = uicontrol(fig, 'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.3 1-3*height 0.6 height], ...
                'FontSize', 16, ...
                'String', sprintf('%.3f', T6(3,4)));
            
    % Orientation
    switch opt.orientation
        case 'approach'
            labels = {'ax:', 'ay:', 'az:'};
        case 'eul'
            labels = {'\phi:', '\theta:', '\psi:'};
        case'rpy'
            labels = {'R:', 'P:', 'Y:'};
    end
    % AX
    
        uicontrol(fig, 'Style', 'text', ...
        'Units', 'normalized', ...
        'BackgroundColor', bgcol, ...
        'Position', [0.05 1-5*height 0.2 height], ...
        'FontSize', 18, ...
        'HorizontalAlignment', 'left', ...
        'String', labels(1));

    handles.t6.r(1) = uicontrol(fig, 'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.3 1-5*height 0.6 height], ...
                'FontSize', 16, ...
                'String', sprintf('%.3f', T6(1,3)));        


    % AY
        uicontrol(fig, 'Style', 'text', ...
        'Units', 'normalized', ...
        'BackgroundColor', bgcol, ...
        'Position', [0.05 1-6*height 0.2 height], ...
        'FontSize', 18, ...
        'HorizontalAlignment', 'left', ...
        'String', labels(2));

    handles.t6.r(2) = uicontrol(fig, 'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.3 1-6*height 0.6 height], ...
                'FontSize', 16, ...
                'String', sprintf('%.3f', T6(2,3)));    

    % AZ
        uicontrol(fig, 'Style', 'text', ...
        'Units', 'normalized', ...
        'BackgroundColor', bgcol, ...
        'Position', [0.05 1-7*height 0.2 height], ...
        'FontSize', 18, ...
        'HorizontalAlignment', 'left', ...
        'String', labels(2));

    handles.t6.r(3) = uicontrol(fig, 'Style', 'text', ...
        'Units', 'normalized', ...
        'Position', [0.3 1-7*height 0.6 height], ...
                'FontSize', 16, ...
                'String', sprintf('%.3f', T6(3,3))); 
    